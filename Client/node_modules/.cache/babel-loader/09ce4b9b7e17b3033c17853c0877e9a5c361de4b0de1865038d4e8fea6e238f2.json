{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ibrah\\\\Desktop\\\\Final-Year-Project\\\\client\\\\src\\\\Components\\\\Dropdown\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from './styles.module.css';\nimport DropLogo from '../../Assets/SVGs/Drop.svg';\nimport DropWhiteLogo from '../../Assets/SVGs/DropWhite.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dropdown = ({\n  options\n}) => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  // Determine which logo to use based on whether an option is selected\n  const logo = selectedOption ? DropWhiteLogo : DropLogo;\n\n  // Determine the styles for the dropdown header based on whether an option is selected\n  const headerStyles = selectedOption ? {\n    backgroundColor: '#3692FF',\n    color: '#fff'\n  } : {};\n  const handleToggle = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleOptionClick = option => {\n    setSelectedOption(option);\n    setIsOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.dropdownContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.dropdownHeader,\n      onClick: handleToggle,\n      style: headerStyles // Apply the dynamic styles\n      ,\n      children: [selectedOption || 'Choose your desired income', /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: styles.dropdownLogo,\n        alt: \"drop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.dropdownListContainer,\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: styles.dropdownList,\n        children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `${styles.dropdownListItem} ${selectedOption === option ? styles.selected : ''}`,\n          onClick: () => handleOptionClick(option),\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 7\n  }, this);\n};\n_s(Dropdown, \"BpVbkn/NswzhRYWTNyv0RP2ekPc=\");\n_c = Dropdown;\nexport default Dropdown;\nvar _c;\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"names":["React","useState","styles","DropLogo","DropWhiteLogo","jsxDEV","_jsxDEV","Dropdown","options","_s","isOpen","setIsOpen","selectedOption","setSelectedOption","logo","headerStyles","backgroundColor","color","handleToggle","handleOptionClick","option","className","dropdownContainer","children","dropdownHeader","onClick","style","src","dropdownLogo","alt","fileName","_jsxFileName","lineNumber","columnNumber","dropdownListContainer","dropdownList","map","index","dropdownListItem","selected","_c","$RefreshReg$"],"sources":["C:/Users/ibrah/Desktop/Final-Year-Project/client/src/Components/Dropdown/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styles from './styles.module.css';\r\nimport DropLogo from '../../Assets/SVGs/Drop.svg';\r\nimport DropWhiteLogo from '../../Assets/SVGs/DropWhite.svg';\r\n\r\nconst Dropdown = ({ options }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [selectedOption, setSelectedOption] = useState(null);\r\n  \r\n    // Determine which logo to use based on whether an option is selected\r\n    const logo = selectedOption ? DropWhiteLogo : DropLogo;\r\n  \r\n    // Determine the styles for the dropdown header based on whether an option is selected\r\n    const headerStyles = selectedOption\r\n      ? { backgroundColor: '#3692FF', color: '#fff' }\r\n      : {};\r\n  \r\n    const handleToggle = () => {\r\n      setIsOpen(!isOpen);\r\n    };\r\n  \r\n    const handleOptionClick = (option) => {\r\n      setSelectedOption(option);\r\n      setIsOpen(false);\r\n    };\r\n  \r\n    return (\r\n      <div className={styles.dropdownContainer}>\r\n        <div \r\n          className={styles.dropdownHeader} \r\n          onClick={handleToggle}\r\n          style={headerStyles} // Apply the dynamic styles\r\n        >\r\n          {selectedOption || 'Choose your desired income'}\r\n          <img src={logo} className={styles.dropdownLogo} alt=\"drop\" />\r\n        </div>\r\n        {isOpen && (\r\n          <div className={styles.dropdownListContainer}>\r\n            <ul className={styles.dropdownList}>\r\n              {options.map((option, index) => (\r\n                <li\r\n                  key={index}\r\n                  className={`${styles.dropdownListItem} ${selectedOption === option ? styles.selected : ''}`}\r\n                  onClick={() => handleOptionClick(option)}\r\n                >\r\n                  {option}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default Dropdown;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,aAAa,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACA,MAAMa,IAAI,GAAGF,cAAc,GAAGR,aAAa,GAAGD,QAAQ;;EAEtD;EACA,MAAMY,YAAY,GAAGH,cAAc,GAC/B;IAAEI,eAAe,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAO,CAAC,GAC7C,CAAC,CAAC;EAEN,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzBP,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,MAAMS,iBAAiB,GAAIC,MAAM,IAAK;IACpCP,iBAAiB,CAACO,MAAM,CAAC;IACzBT,SAAS,CAAC,KAAK,CAAC;EAClB,CAAC;EAED,oBACEL,OAAA;IAAKe,SAAS,EAAEnB,MAAM,CAACoB,iBAAkB;IAAAC,QAAA,gBACvCjB,OAAA;MACEe,SAAS,EAAEnB,MAAM,CAACsB,cAAe;MACjCC,OAAO,EAAEP,YAAa;MACtBQ,KAAK,EAAEX,YAAa,CAAC;MAAA;MAAAQ,QAAA,GAEpBX,cAAc,IAAI,4BAA4B,eAC/CN,OAAA;QAAKqB,GAAG,EAAEb,IAAK;QAACO,SAAS,EAAEnB,MAAM,CAAC0B,YAAa;QAACC,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC,EACLvB,MAAM,iBACLJ,OAAA;MAAKe,SAAS,EAAEnB,MAAM,CAACgC,qBAAsB;MAAAX,QAAA,eAC3CjB,OAAA;QAAIe,SAAS,EAAEnB,MAAM,CAACiC,YAAa;QAAAZ,QAAA,EAChCf,OAAO,CAAC4B,GAAG,CAAC,CAAChB,MAAM,EAAEiB,KAAK,kBACzB/B,OAAA;UAEEe,SAAS,EAAG,GAAEnB,MAAM,CAACoC,gBAAiB,IAAG1B,cAAc,KAAKQ,MAAM,GAAGlB,MAAM,CAACqC,QAAQ,GAAG,EAAG,EAAE;UAC5Fd,OAAO,EAAEA,CAAA,KAAMN,iBAAiB,CAACC,MAAM,CAAE;UAAAG,QAAA,EAExCH;QAAM,GAJFiB,KAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKR,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACxB,EAAA,CAhDEF,QAAQ;AAAAiC,EAAA,GAARjC,QAAQ;AAkDZ,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}